<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>concurrency – Ability Rush</title>
	<atom:link href="/tag/concurrency/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Learn &#38; Improve</description>
	<lastBuildDate>Sat, 08 Apr 2023 14:28:20 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.5.4</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-android-chrome-512x512-1-32x32.png</url>
	<title>concurrency – Ability Rush</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Detecting and Handling Race Conditions in Golang</title>
		<link>/detecting-and-handling-race-conditions-in-golang/</link>
					<comments>/detecting-and-handling-race-conditions-in-golang/#respond</comments>
		
		<dc:creator><![CDATA[Akshay Khairmode]]></dc:creator>
		<pubDate>Thu, 07 Oct 2021 11:26:09 +0000</pubDate>
				<category><![CDATA[Golang]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[concurrency]]></category>
		<category><![CDATA[go]]></category>
		<category><![CDATA[golang]]></category>
		<category><![CDATA[mutex]]></category>
		<category><![CDATA[waitgroup]]></category>
		<guid isPermaLink="false">/?p=290</guid>

					<description><![CDATA[<p>In this post we see what are race conditions, how to detect them and how to fix them. We will test this on a map which are not thread safe.</p>
<p>The post <a href="/detecting-and-handling-race-conditions-in-golang/">Detecting and Handling Race Conditions in Golang</a> first appeared on <a href="/">Ability Rush</a>.</p>]]></description>
		
					<wfw:commentRss>/detecting-and-handling-race-conditions-in-golang/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">290</post-id>	</item>
		<item>
		<title>Download file concurrently in Golang &#8211; Part 4(Resume)</title>
		<link>/download-file-concurrently-in-golang-part-4-resume/</link>
					<comments>/download-file-concurrently-in-golang-part-4-resume/#comments</comments>
		
		<dc:creator><![CDATA[Akshay Khairmode]]></dc:creator>
		<pubDate>Sun, 26 Sep 2021 12:51:02 +0000</pubDate>
				<category><![CDATA[Golang]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[concurrency]]></category>
		<category><![CDATA[download file]]></category>
		<category><![CDATA[go]]></category>
		<category><![CDATA[resume]]></category>
		<guid isPermaLink="false">/?p=177</guid>

					<description><![CDATA[<p>In this post, We will store the file metadata, read it the next time, and using that data we will resume our download along with verbose logging.</p>
<p>The post <a href="/download-file-concurrently-in-golang-part-4-resume/">Download file concurrently in Golang – Part 4(Resume)</a> first appeared on <a href="/">Ability Rush</a>.</p>]]></description>
		
					<wfw:commentRss>/download-file-concurrently-in-golang-part-4-resume/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">177</post-id>	</item>
		<item>
		<title>Download file concurrently in Golang-Part 3(Progress Bar)</title>
		<link>/download-file-concurrently-with-golang-part-3progress-bar/</link>
					<comments>/download-file-concurrently-with-golang-part-3progress-bar/#respond</comments>
		
		<dc:creator><![CDATA[Akshay Khairmode]]></dc:creator>
		<pubDate>Sat, 11 Sep 2021 15:16:49 +0000</pubDate>
				<category><![CDATA[Golang]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[concurrency]]></category>
		<category><![CDATA[download]]></category>
		<category><![CDATA[golang]]></category>
		<guid isPermaLink="false">/?p=111</guid>

					<description><![CDATA[<p>In part 2 we updated the code to be more memory efficient using files and io.Copy. Now we will try to implement a progress bar in the tool. This progress bar will show progress for each of the connections. We will also handle the user kill commands like ctrl+c. Let&#8217;s start. Full code available here Our [&#8230;]</p>
<p>The post <a href="/download-file-concurrently-with-golang-part-3progress-bar/">Download file concurrently in Golang-Part 3(Progress Bar)</a> first appeared on <a href="/">Ability Rush</a>.</p>]]></description>
		
					<wfw:commentRss>/download-file-concurrently-with-golang-part-3progress-bar/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">111</post-id>	</item>
		<item>
		<title>Download file concurrently in Golang-Part 2(Memory)</title>
		<link>/download-file-concurrently-in-golang-part-2/</link>
					<comments>/download-file-concurrently-in-golang-part-2/#comments</comments>
		
		<dc:creator><![CDATA[Akshay Khairmode]]></dc:creator>
		<pubDate>Thu, 09 Sep 2021 16:52:14 +0000</pubDate>
				<category><![CDATA[Golang]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[concurrency]]></category>
		<category><![CDATA[download file]]></category>
		<category><![CDATA[go]]></category>
		<guid isPermaLink="false">/?p=88</guid>

					<description><![CDATA[<p>In Part 1 we saw how we can download the file, but as seen there are some memory issues when loading the data into a []byte. Therefore we have to optimize it.  Check part 2 full code here &#8211; https://github.com/akshaykhairmode/summon/tree/v0.2.0 Optimizations Now for optimization, we will do the below steps, Create temporary files for storing the chunks based [&#8230;]</p>
<p>The post <a href="/download-file-concurrently-in-golang-part-2/">Download file concurrently in Golang-Part 2(Memory)</a> first appeared on <a href="/">Ability Rush</a>.</p>]]></description>
		
					<wfw:commentRss>/download-file-concurrently-in-golang-part-2/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">88</post-id>	</item>
		<item>
		<title>Download file concurrently in Golang</title>
		<link>/download-file-concurrently-in-golang-part-1/</link>
					<comments>/download-file-concurrently-in-golang-part-1/#respond</comments>
		
		<dc:creator><![CDATA[Akshay Khairmode]]></dc:creator>
		<pubDate>Sat, 04 Sep 2021 20:02:03 +0000</pubDate>
				<category><![CDATA[Golang]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[concurrency]]></category>
		<category><![CDATA[download]]></category>
		<category><![CDATA[file]]></category>
		<category><![CDATA[go]]></category>
		<guid isPermaLink="false">/?p=40</guid>

					<description><![CDATA[<p>How to download a file over HTTP with multiple connections in Golang. We are making a small tool which will download the file given the number of connections.</p>
<p>The post <a href="/download-file-concurrently-in-golang-part-1/">Download file concurrently in Golang</a> first appeared on <a href="/">Ability Rush</a>.</p>]]></description>
		
					<wfw:commentRss>/download-file-concurrently-in-golang-part-1/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">40</post-id>	</item>
	</channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>interface – Ability Rush</title>
	<atom:link href="/tag/interface/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Learn &#38; Improve</description>
	<lastBuildDate>Sat, 08 Apr 2023 14:14:08 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.5.4</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-android-chrome-512x512-1-32x32.png</url>
	<title>interface – Ability Rush</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Understanding Generics in Golang 1.18</title>
		<link>/understanding-generics-in-golang-1-18/</link>
					<comments>/understanding-generics-in-golang-1-18/#respond</comments>
		
		<dc:creator><![CDATA[Akshay Khairmode]]></dc:creator>
		<pubDate>Sun, 24 Apr 2022 16:13:28 +0000</pubDate>
				<category><![CDATA[Golang]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[generics]]></category>
		<category><![CDATA[go]]></category>
		<category><![CDATA[golang]]></category>
		<category><![CDATA[interface]]></category>
		<guid isPermaLink="false">/?p=1160</guid>

					<description><![CDATA[<p>In this post, We will see what are Generics and how they work in the new Go 1.18 version. Generics is one of the most requested feature for the language.</p>
<p>The post <a href="/understanding-generics-in-golang-1-18/">Understanding Generics in Golang 1.18</a> first appeared on <a href="/">Ability Rush</a>.</p>]]></description>
		
					<wfw:commentRss>/understanding-generics-in-golang-1-18/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">1160</post-id>	</item>
		<item>
		<title>Writing Mocks in Golang with mockery</title>
		<link>/writing-mocks-in-golang-with-mockery/</link>
					<comments>/writing-mocks-in-golang-with-mockery/#comments</comments>
		
		<dc:creator><![CDATA[Akshay Khairmode]]></dc:creator>
		<pubDate>Sun, 30 Jan 2022 14:38:57 +0000</pubDate>
				<category><![CDATA[Golang]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[interface]]></category>
		<category><![CDATA[mockery]]></category>
		<category><![CDATA[unit tests]]></category>
		<guid isPermaLink="false">/?p=827</guid>

					<description><![CDATA[<p>In this post, We will see how we can use mocks in writing our unit tests so that external dependencies can be mocked and our tests don't need it.</p>
<p>The post <a href="/writing-mocks-in-golang-with-mockery/">Writing Mocks in Golang with mockery</a> first appeared on <a href="/">Ability Rush</a>.</p>]]></description>
		
					<wfw:commentRss>/writing-mocks-in-golang-with-mockery/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">827</post-id>	</item>
		<item>
		<title>Understanding Stringer Interface In Golang</title>
		<link>/understanding-stringer-interface-in-golang/</link>
					<comments>/understanding-stringer-interface-in-golang/#respond</comments>
		
		<dc:creator><![CDATA[Akshay Khairmode]]></dc:creator>
		<pubDate>Fri, 08 Oct 2021 16:13:55 +0000</pubDate>
				<category><![CDATA[Golang]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[golang]]></category>
		<category><![CDATA[interface]]></category>
		<category><![CDATA[string]]></category>
		<category><![CDATA[stringer]]></category>
		<guid isPermaLink="false">/?p=387</guid>

					<description><![CDATA[<p>We try to understand the stringer interface, how to use it and how it works with pointers. We also see an example of stringer interface.</p>
<p>The post <a href="/understanding-stringer-interface-in-golang/">Understanding Stringer Interface In Golang</a> first appeared on <a href="/">Ability Rush</a>.</p>]]></description>
		
					<wfw:commentRss>/understanding-stringer-interface-in-golang/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">387</post-id>	</item>
		<item>
		<title>Understanding Interfaces in Golang with use case</title>
		<link>/understanding-interfaces-in-golang-with-use-case/</link>
					<comments>/understanding-interfaces-in-golang-with-use-case/#respond</comments>
		
		<dc:creator><![CDATA[Akshay Khairmode]]></dc:creator>
		<pubDate>Thu, 16 Sep 2021 14:05:33 +0000</pubDate>
				<category><![CDATA[Golang]]></category>
		<category><![CDATA[Technology]]></category>
		<category><![CDATA[golang]]></category>
		<category><![CDATA[interface]]></category>
		<guid isPermaLink="false">/?p=140</guid>

					<description><![CDATA[<p>In this post, we try to understand the named and empty interfaces Go provides along with a use case to understand them better.</p>
<p>The post <a href="/understanding-interfaces-in-golang-with-use-case/">Understanding Interfaces in Golang with use case</a> first appeared on <a href="/">Ability Rush</a>.</p>]]></description>
		
					<wfw:commentRss>/understanding-interfaces-in-golang-with-use-case/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">140</post-id>	</item>
	</channel>
</rss>
